<Activity mc:Ignorable="sap sap2010" x:Class="Workbook_RetrieveMetadata" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="WorkbookPath" Type="InArgument(x:String)" />
    <x:Property Name="DictionaryOfFoundFormats" Type="OutArgument(scg:Dictionary(x:String, scg:HashSet(x:String)))" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>2044,916</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Workbook_RetrieveMetadata_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>UiPath.Shared.Contracts</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Shared.Activities.Business</x:String>
      <x:String>UiPath.Shared.Activities.Services</x:String>
      <x:String>UiPath.Shared.Activities.Services.Interfaces</x:String>
      <x:String>UiPath.Shared.Activities.ConnectionService.Contracts</x:String>
      <x:String>UiPath.Shared.Activities.Bindings</x:String>
      <x:String>UiPath.Shared.Activities.Utils</x:String>
      <x:String>UiPath.Shared.Activities.Triggers</x:String>
      <x:String>UiPath.CSV.Activities</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>UiPath.Excel.Activities.Properties</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="This code iterates through each worksheet in an Excel file, extracting and storing the regional format information for each cell. It captures both number and date formats, storing them in a dictionary where the worksheet name serves as the key. Exception handling is implemented to manage potential errors during the process. Finally, it outputs the gathered format information for each worksheet and assigns it to a dictionary for further use. If any exceptions occur during the execution, it displays an error message." DisplayName="Workbook_RetrieveEachCellFormatting" sap:VirtualizedContainerService.HintSize="512,819" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="450,173" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Workbook_RetrieveEachCellFormatting: START&quot;]" />
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="' Define a dictionary to store the regional format information for each worksheet&#xD;&#xA;Dim formatDict As New Dictionary(Of String, HashSet(Of String))&#xD;&#xA;&#xD;&#xA;' Load the Excel file&#xD;&#xA;Try&#xD;&#xA;    Using workbook As New ClosedXML.Excel.XLWorkbook(excelFilePath)&#xD;&#xA;        ' Loop through each worksheet&#xD;&#xA;        For Each worksheet As ClosedXML.Excel.IXLWorksheet In workbook.Worksheets&#xD;&#xA;            ' Create a HashSet to store the unique formats found in the worksheet&#xD;&#xA;            Dim formatSet As New HashSet(Of String)&#xD;&#xA;&#xD;&#xA;            ' Loop through each cell in the worksheet&#xD;&#xA;            For Each cell As ClosedXML.Excel.IXLCell In worksheet.CellsUsed()&#xD;&#xA;                ' Check if cell.Style is not null&#xD;&#xA;                If cell.Style IsNot Nothing Then&#xD;&#xA;                    Try&#xD;&#xA;                        ' Get the number format of the cell, handling null reference&#xD;&#xA;                        Dim numberFormat As String = If(cell.Style.NumberFormat.Format, Nothing)&#xD;&#xA;                        ' Get the date format of the cell, handling null reference&#xD;&#xA;                        Dim dateFormat As String = If(cell.Style.DateFormat.Format, Nothing)&#xD;&#xA;                        &#xD;&#xA;                        ' Collect the format information if it's not already in the HashSet&#xD;&#xA;                        If Not String.IsNullOrEmpty(numberFormat) Then&#xD;&#xA;                            formatSet.Add($&quot;NumberFormat: {numberFormat}&quot;)&#xD;&#xA;                        End If&#xD;&#xA;                        If Not String.IsNullOrEmpty(dateFormat) Then&#xD;&#xA;                            formatSet.Add($&quot;DateFormat: {dateFormat}&quot;)&#xD;&#xA;                        End If&#xD;&#xA;                    Catch exStyle As Exception&#xD;&#xA;                        ' Display any exceptions that occur when processing style settings&#xD;&#xA;                        Console.WriteLine($&quot;An exception occurred while processing cell style settings: {exStyle.Message}&quot;)&#xD;&#xA;                    End Try&#xD;&#xA;                End If&#xD;&#xA;            Next&#xD;&#xA;&#xD;&#xA;            ' Add the format information HashSet to the dictionary with the worksheet name as the key&#xD;&#xA;            formatDict.Add(worksheet.Name, formatSet)&#xD;&#xA;        Next&#xD;&#xA;    End Using&#xD;&#xA;&#xD;&#xA;    ' Output the regional format information for each worksheet&#xD;&#xA;    Console.WriteLine(&quot;Regional format information for each worksheet:&quot;)&#xD;&#xA;    For Each kvp As KeyValuePair(Of String, HashSet(Of String)) In formatDict&#xD;&#xA;        Console.WriteLine($&quot;Worksheet: {kvp.Key}&quot;)&#xD;&#xA;        For Each formatInfo As String In kvp.Value&#xD;&#xA;            Console.WriteLine(formatInfo)&#xD;&#xA;        Next&#xD;&#xA;    Next&#xD;&#xA;    OutputFormatDict = formatDict&#xD;&#xA;    Console.WriteLine(&quot;Regional format information outputted successfully.&quot;)&#xD;&#xA;&#xD;&#xA;Catch ex As Exception&#xD;&#xA;    ' Display any exceptions that occur&#xD;&#xA;    Console.WriteLine($&quot;An exception occurred: {ex.Message}&quot;)&#xD;&#xA;End Try" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="450,277" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="excelFilePath">[WorkbookPath]</InArgument>
        <OutArgument x:TypeArguments="scg:Dictionary(x:String, scg:HashSet(x:String))" x:Key="OutputFormatDict">[DictionaryOfFoundFormats]</OutArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="450,164" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Workbook_RetrieveEachCellFormatting: END&quot;]" />
  </Sequence>
</Activity>