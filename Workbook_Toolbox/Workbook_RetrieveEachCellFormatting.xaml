<Activity mc:Ignorable="sap sap2010" x:Class="Workbook_RetrieveMetadata" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="WorkbookPath" Type="InArgument(x:String)" />
    <x:Property Name="List" Type="InArgument(scg:List(x:String))" />
  </x:Members>
  <this:Workbook_RetrieveMetadata.List>
    <InArgument x:TypeArguments="scg:List(x:String)" />
  </this:Workbook_RetrieveMetadata.List>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1627,917</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Workbook_RetrieveMetadata_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>UiPath.Shared.Contracts</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.Shared.Activities.Business</x:String>
      <x:String>UiPath.Shared.Activities.Services</x:String>
      <x:String>UiPath.Shared.Activities.Services.Interfaces</x:String>
      <x:String>UiPath.Shared.Activities.ConnectionService.Contracts</x:String>
      <x:String>UiPath.Shared.Activities.Bindings</x:String>
      <x:String>UiPath.Shared.Activities.Utils</x:String>
      <x:String>UiPath.Shared.Activities.Triggers</x:String>
      <x:String>UiPath.CSV.Activities</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>UiPath.Excel.Activities.Properties</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Workbook_RetrieveEachCellFormatting" sap:VirtualizedContainerService.HintSize="512,702" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="450,173" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Workbook_RetrieveEachCellFormatting: START&quot;]" />
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="' Define a list to store the regional formatting information&#xA;Console.WriteLine(&quot;Defining a list to store regional formatting information...&quot;)&#xA;Dim formatList As New List(Of String)&#xA;Console.WriteLine(&quot;List defined successfully.&quot;)&#xA;&#xA;' Load the Excel file&#xA;Console.WriteLine(&quot;Loading Excel file...&quot;)&#xA;Try&#xA;    Using workbook As New ClosedXML.Excel.XLWorkbook(excelFilePath)&#xA;        Console.WriteLine(&quot;Excel file loaded successfully.&quot;)&#xA;        &#xA;        ' Loop through each worksheet&#xA;        Console.WriteLine(&quot;Looping through each worksheet...&quot;)&#xA;        For Each worksheet As ClosedXML.Excel.IXLWorksheet In workbook.Worksheets&#xA;            ' Check if worksheet is not null&#xA;            If worksheet IsNot Nothing Then&#xA;                Console.WriteLine($&quot;Processing worksheet: {worksheet.Name}...&quot;)&#xA;                &#xA;                ' Loop through each cell in the worksheet&#xA;                Console.WriteLine(&quot;Looping through each cell in the worksheet...&quot;)&#xA;                For Each cell As ClosedXML.Excel.IXLCell In worksheet.CellsUsed()&#xA;                    ' Check if cell is not null&#xA;                    If cell IsNot Nothing Then&#xA;                        ' Check if cell.Style is not null&#xA;                        If cell.Style IsNot Nothing Then&#xA;                            Try&#xA;                                ' Get the number format of the cell, handling null reference&#xA;                                Console.WriteLine(&quot;Getting the number format of the cell...&quot;)&#xA;                                Dim numberFormat As String = If(cell.Style.NumberFormat IsNot Nothing, cell.Style.NumberFormat.Format, Nothing)&#xA;                                ' Get the date format of the cell, handling null reference&#xA;                                Console.WriteLine(&quot;Getting the date format of the cell...&quot;)&#xA;                                Dim dateFormat As String = If(cell.Style.DateFormat IsNot Nothing, cell.Style.DateFormat.Format, Nothing)&#xA;                                &#xA;                                ' Collect the format information if it's not already in the list&#xA;                                Console.WriteLine(&quot;Collecting format information...&quot;)&#xA;                                If Not String.IsNullOrEmpty(numberFormat) AndAlso Not formatList.Contains($&quot;NumberFormat: {numberFormat}&quot;) Then&#xA;                                    formatList.Add($&quot;NumberFormat: {numberFormat}&quot;)&#xA;                                End If&#xA;                                If Not String.IsNullOrEmpty(dateFormat) AndAlso Not formatList.Contains($&quot;DateFormat: {dateFormat}&quot;) Then&#xA;                                    formatList.Add($&quot;DateFormat: {dateFormat}&quot;)&#xA;                                End If&#xA;                            Catch exCell As Exception&#xA;                                ' Display any exceptions that occur when processing a cell&#xA;                                Console.WriteLine($&quot;An exception occurred while processing cell: {exCell.Message}&quot;)&#xA;                            End Try&#xA;                        End If&#xA;                    End If&#xA;                Next&#xA;                Console.WriteLine($&quot;Worksheet {worksheet.Name} processed.&quot;)&#xA;            End If&#xA;        Next&#xA;    End Using&#xA;&#xA;    ' Output the list of formatting information&#xA;    Console.WriteLine(&quot;Regional formatting information:&quot;)&#xA;    For Each formatInfo As String In formatList&#xA;        Console.WriteLine(formatInfo)&#xA;    Next&#xA;    OutputFormatList = formatList&#xA;    Console.WriteLine(&quot;Formatting information outputted successfully.&quot;)&#xA;&#xA;Catch ex As Exception&#xA;    ' Display any exceptions that occur&#xA;    Console.WriteLine($&quot;An exception occurred: {ex.Message}&quot;)&#xA;End Try" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="450,277" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="excelFilePath">[WorkbookPath]</InArgument>
        <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="OutputFormatList">[List]</OutArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="450,164" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Workbook_RetrieveEachCellFormatting: END&quot;]" />
  </Sequence>
</Activity>